import requests
import gradio as gr

# Ollama local endpoint
OLLAMA_URL = "http://localhost:11434/api/generate"

def generate_unit_tests(java_code: str) -> str:
    # Build a well‑formatted prompt with no special characters breaking Python syntax
    prompt = (
        "You are an expert Java developer.\n\n"
        "TASK:\n"
        "Generate a high-quality JUnit 5 test class for the given Java class.\n\n"
        "REQUIREMENTS:\n"
        "- Include all necessary imports (JUnit 5).\n"
        "- Cover ALL public methods with meaningful and edge-case test cases.\n"
        "- Use clear and descriptive test method names.\n"
        "- Use appropriate assertions (assertEquals, assertTrue, assertThrows, etc.).\n"
        "- NO main methods, NO explanatory comments. Only the imports and test class.\n"
        "- Make the test class ready to copy-paste into a standard Maven/Gradle project.\n\n"
        "REFERENCE FORMAT (follow this style exactly):\n\n"
        "Example Input Class:\n"
        "public class Example {\n"
        "    public int add(int a, int b) { return a+b; }\n"
        "    public int multiply(int a, int b) { return a*b; }\n"
        "}\n\n"
        "Expected Test Class Output:\n"
        "import org.junit.jupiter.api.Test;\n"
        "import static org.junit.jupiter.api.Assertions.*;\n\n"
        "class ExampleTest {\n"
        "    @Test\n"
        "    void add_shouldReturnSum() {\n"
        "        Example e = new Example();\n"
        "        assertEquals(5, e.add(2,3));\n"
        "        assertEquals(0, e.add(-2,2));\n"
        "    }\n\n"
        "    @Test\n"
        "    void multiply_shouldReturnProduct() {\n"
        "        Example e = new Example();\n"
        "        assertEquals(6, e.multiply(2,3));\n"
        "        assertEquals(0, e.multiply(0,5));\n"
        "    }\n"
        "}\n\n"
        "END OF EXAMPLE.\n\n"
        "NOW GENERATE for this class:\n"
        f"{java_code}\n"
    )

    payload = {
        "model": "codellama:13b",  # use CodeLlama model
        "prompt": prompt,
        "stream": False
    }

    try:
        response = requests.post(OLLAMA_URL, json=payload)
        if response.status_code == 200:
            return response.json().get("response", "No test generated.")
        else:
            return f"Error: {response.status_code} {response.text}"
    except Exception as e:
        return f"Error connecting to Ollama: {str(e)}"


# Gradio interface
interface = gr.Interface(
    fn=generate_unit_tests,
    inputs=gr.Textbox(lines=20, placeholder="Paste your Java class here"),
    outputs=gr.Textbox(label="Generated JUnit 5 Test Class"),
    title="AI‑Powered JUnit Test Generator (CodeLlama)",
    description="Paste your Java class and get high-quality JUnit 5 tests generated by CodeLlama via Ollama."
)

if __name__ == "__main__":
    interface.launch()
